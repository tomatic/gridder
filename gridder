#!/bin/bash
# *****************************************************************************
# gridder - Set active window position and size on a custom grid
#
# Syntax:
#
# gridder gridcols gridrows col row cols rows
#
# Parameters:
#
# gridcols    The number of columns in the grid.
# gridrows    The number of rows in the grid.
# col         The column at which to place the window. First column is zero.
# row         The row at which to place the window. First row is zero.
# cols        The width of the window in columns. Maximum is gridcols minus col.
# rows        The height of the window in rows. Maximum is gridrows minus row.
#
# Dependencies:
#
# xdotool
# xdpyinfo
#
# *****************************************************************************
if [ "$#" -ne 6 ]; then
    echo "Wrong number of arguments."
    echo "Syntax:"
    echo "  gridder gridcols gridrows col row cols rows"
    exit 1
fi

gridcols=$1
gridrows=$2
col=$3
row=$4
cols=$5
rows=$6

# Get usable desktop size 
screenwidth=$(xprop -root _NET_WORKAREA | sed -r 's/^[^0-9]*([0-9]+), ([0-9]+), ([0-9]+), ([0-9]+)/\3/')
screenheight=$(xprop -root _NET_WORKAREA | sed -r 's/^[^0-9]*([0-9]+), ([0-9]+), ([0-9]+), ([0-9]+)/\4/')

# Get dimensions of window decorations (titlebar + border)
borders=$(xprop _NET_FRAME_EXTENTS -id $(xdotool getactivewindow))
borderleft=$(echo $borders | sed -r 's/^[^0-9]*([0-9]+), ([0-9]+), ([0-9]+), ([0-9]+)/\1/')
borderright=$(echo $borders | sed -r 's/^[^0-9]*([0-9]+), ([0-9]+), ([0-9]+), ([0-9]+)/\2/')
bordertop=$(echo $borders | sed -r 's/^[^0-9]*([0-9]+), ([0-9]+), ([0-9]+), ([0-9]+)/\3/')
borderbottom=$(echo $borders | sed -r 's/^[^0-9]*([0-9]+), ([0-9]+), ([0-9]+), ([0-9]+)/\4/')
colwidth=$(expr $((screenwidth / gridcols)))
rowheight=$(expr $((screenheight / gridrows)))
windowwidth=$(expr $((colwidth * cols)))
windowheight=$(expr $((rowheight * rows)))
xpos=$(expr $((col * colwidth)))
ypos=$(expr $((row * rowheight)))
xdotool getactivewindow windowsize $((windowwidth - (borderleft + borderright))) $((windowheight - (bordertop + borderbottom)))

# Fix for Konsole window positioning.
# Konsole for some reason behaves differently from other windows,
# the vertical position is exactly one BORDERTOP lower.
# So with this hack the result is as expected, but the cause of this is unclear.
if [[ $(xdotool getactivewindow getwindowname) =~ Konsole|Dolphin ]]; then
  xdotool getactivewindow windowmove $xpos $((ypos + bordertop))
else
  xdotool getactivewindow windowmove $xpos $ypos
fi
